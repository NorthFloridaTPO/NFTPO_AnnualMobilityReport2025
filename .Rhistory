# Create a Highchart object with data labels and stack totals
hchart(df_cost_con, "column", hcaes(x = year, y = dollars)) %>%
hc_colors(custom_colors) %>%
hc_plotOptions(column = list(
dataLabels = list(
enabled = TRUE,
formatter = JS(paste0("function() {
var units = ['', 'K', 'M', 'B'];
var order = Math.floor(Math.log(this.y) / Math.log(1000));
var unit = units[order];
var num = this.y / Math.pow(1000, order);
if (order >= 2) {
return '$' + num.toFixed(2) + unit;
}
return '$' + num.toFixed(0) + unit;
}"))
#     formatter = JS("function() {
# return '$'+Highcharts.numberFormat(this.y / 1e6, 1) + ' Mil';}")
)
)) %>%
hc_yAxis(
stackLabels = list(
enabled = FALSE, # Enable stack totals
style = list(fontWeight = 'bold', color = 'gray')),
title = list(text = "Cost (Dollars)"),
min = 0,
labels = list(
formatter = JS("function() {
var units = ['', 'K', 'M', 'B'];
var order = Math.floor(Math.log(this.value) / Math.log(1000));
var unit = units[order];
var num = this.value / Math.pow(1000, order);
if (order >= 2){
return '$' + num.toFixed(2) + unit;
}
else if (this.value == 0){
return this.value;
}
else{
return '$' + num.toFixed(0) + unit;
}
}")
)
) %>%
hc_title(text = "Cost of Congestion by Year") %>%
hc_subtitle(text = 'Source: <a href="https://static.tti.tamu.edu/tti.tamu.edu/documents/mobility-report-2023.pdf" target="_blank"><b>Texas A&M Transportation Institute</b></a>') %>%
hc_xAxis(title = list(text = "Year")) %>%
hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
hc_legend(enabled = TRUE) %>%
hc_add_theme(hc_theme_smpl()) %>%
hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
hc_exporting(enabled = TRUE)  # Enable the exporting button
# Define your custom colors
custom_colors <- c("#A7E6FF","#3ABEF9","#3572EF","#050C9C")
df_cost_fatal <- read.csv("~/GitHub/AnnualMobilityReport2024/data/cost_fatal.csv")
# Create a Highchart object with data labels and stack totals
hchart(df_cost_fatal, "column", hcaes(x = year, y = cost, group = county)) %>%
hc_colors(custom_colors) %>%
hc_plotOptions(column = list(
stacking = "normal",
dataLabels = list(
enabled = TRUE,
formatter = JS(paste0("function() {
var units = ['', 'K', 'M', 'B'];
var order = Math.floor(Math.log(this.y) / Math.log(1000));
var unit = units[order];
var num = this.y / Math.pow(1000, order);
if (order >= 3) {
return '$' + num.toFixed(2) + unit;
}
return '$' + num.toFixed(0) + unit;
}"))
#     formatter = JS("function() {
# return '$' + Highcharts.numberFormat(this.y / 1e9, 1) + ' Bil';}")
)
)) %>%
hc_yAxis(
stackLabels = list(
enabled = TRUE, # Enable stack totals
#style = list(fontWeight = 'bold', color = 'gray',
formatter = JS(paste0("function() {
var units = ['', 'K', 'M', 'B'];
var order = Math.floor(Math.log(this.total) / Math.log(1000));
var unit = units[order];
var num = this.total / Math.pow(1000, order);
if (order >= 2) {
return '$' + num.toFixed(2) + unit;
}
else if (order == 0){
return this.total;
}
else {
return '$' + num.toFixed(0) + unit;
}
}"))
),
title = list(text = "Cost (Dollars)"),
min = 0,
labels = list(
formatter = JS("function() {
var units = ['', 'K', 'M', 'B'];
var order = Math.floor(Math.log(this.value) / Math.log(1000));
var unit = units[order];
var num = this.value / Math.pow(1000, order);
if (order == 3){
return '$' + num.toFixed(2) + unit;
}
else if (this.value == 0){
return this.value;
}
else{
return '$' + num.toFixed(0) + unit;
}
}")
)
) %>%
hc_title(text = "Cost of Fatal Crashes by Year") %>%
hc_subtitle(text = 'Source: <a href="https://signal4analytics.com/" target="_blank"><b>Signal Four Analytics</b></a> and <a href="https://fdotwww.blob.core.windows.net/sitefinity/docs/default-source/roadway/fdm/2024/2024fdm122varexcept.pdf?sfvrsn=23e25c46_1" target="_blank"><b>FDOT Design Manual</b></a>') %>%
hc_xAxis(title = list(text = "Year")) %>%
hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
hc_legend(enabled = TRUE) %>%
hc_add_theme(hc_theme_smpl()) %>%
hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
hc_exporting(enabled = TRUE)  # Enable the exporting button
# Define your custom colors
custom_colors <- c("#A7E6FF","#3ABEF9","#3572EF","#050C9C")
df_cost_injury <- read.csv("~/GitHub/AnnualMobilityReport2024/data/cost_serious_injury.csv")
# Create a Highchart object with data labels and stack totals
hchart(df_cost_injury, "column", hcaes(x = year, y = cost, group = county)) %>%
hc_colors(custom_colors) %>%
hc_plotOptions(column = list(
stacking = "normal",
dataLabels = list(
enabled = TRUE,
formatter = JS(paste0("function() {
var units = ['', 'K', 'M', 'B'];
var order = Math.floor(Math.log(this.y) / Math.log(1000));
var unit = units[order];
var num = this.y / Math.pow(1000, order);
if (order >= 3) {
return '$' + num.toFixed(2) + unit;
}
return '$' + num.toFixed(0) + unit;
}"))
)
)) %>%
hc_yAxis(
stackLabels = list(
enabled = TRUE, # Enable stack totals
formatter = JS(paste0("function() {
var units = ['', 'K', 'M', 'B'];
var order = Math.floor(Math.log(this.total) / Math.log(1000));
var unit = units[order];
var num = this.total / Math.pow(1000, order);
if (order >= 2) {
return '$' + num.toFixed(0) + unit;
}
else if (order == 0){
return this.total;
}
else {
return '$' + num.toFixed(0) + unit;
}
}"))
),
title = list(text = "Cost (Dollars)"),
min = 0,
max = 3500000000,
labels = list(
formatter = JS("function() {
var units = ['', 'K', 'M', 'B'];
var order = Math.floor(Math.log(this.value) / Math.log(1000));
var unit = units[order];
var num = this.value / Math.pow(1000, order);
if (order == 3){
return '$' + num.toFixed(2) + unit;
}
else if (this.value == 0){
return this.value;
}
else{
return '$' + num.toFixed(0) + unit;
}
}")
)
) %>%
hc_title(text = "Cost of Serious Injury Crashes by Year") %>%
hc_subtitle(text = 'Source: <a href="https://signal4analytics.com/" target="_blank"><b>Signal Four Analytics</b></a> and <a href="https://fdotwww.blob.core.windows.net/sitefinity/docs/default-source/roadway/fdm/2024/2024fdm122varexcept.pdf?sfvrsn=23e25c46_1" target="_blank"><b>FDOT Design Manual</b></a>') %>%
hc_xAxis(title = list(text = "Year")) %>%
hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
hc_legend(enabled = TRUE) %>%
hc_add_theme(hc_theme_smpl()) %>%
hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
hc_exporting(enabled = TRUE)  # Enable the exporting button
df_roi <- read.csv("~/GitHub/AnnualMobilityReport2024/data/roi.csv")
custom_colors <- c("#3ABEF9")
# Create a Highchart object with data labels and stack totals
hchart(df_roi, "column", hcaes(x = Mode, y = Benefit)) %>%
hc_colors(custom_colors) %>%
hc_plotOptions(column = list(
dataLabels = list(
enabled = TRUE,
formatter = JS(paste0("function() {
var units = ['', 'K', 'M', 'B'];
var order = Math.floor(Math.log(this.y) / Math.log(1000));
var unit = units[order];
var num = this.y / Math.pow(1000, order);
if (order >= 3) {
return '$' + num.toFixed(1) + unit;
}
return '$' + num.toFixed(0) + unit;
}"))
))) %>%
hc_yAxis(
stackLabels = list(
enabled = FALSE, # Enable stack totals
style = list(fontWeight = 'bold', color = 'gray')),
title = list(text = "Cost (Dollars)"),
min = 0,
labels = list(
formatter = JS("function() {
var units = ['', 'K', 'M', 'B'];
var order = Math.floor(Math.log(this.value) / Math.log(1000));
var unit = units[order];
var num = this.value / Math.pow(1000, order);
if (order >= 3){
return '$' + num.toFixed(1) + unit;
}
else if (this.value == 0){
return this.value;
}
else{
return '$' + num.toFixed(0) + unit;
}
}")
)
) %>%
hc_title(text = "Benefit in Dollars by Mode") %>%
hc_subtitle(text = 'Source: <a href="http://edr.state.fl.us/content/returnoninvestment/ROI_Transportation.pdf" target="_blank"><b>Florida Department of Transportation Office of Economic & Demographic Research</b></a>') %>%
hc_xAxis(title = list(text = "Mode")) %>%
hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
hc_legend(enabled = TRUE) %>%
hc_add_theme(hc_theme_smpl()) %>%
hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
hc_exporting(enabled = TRUE)  # Enable the exporting button
table_options <- function() {
list(
rowCallback = DT::JS(
"function(row, data, index) {
$('td:eq(0)', row).html(index + 1);
}"
),
deferRender = TRUE,
searching = FALSE,
scroller = TRUE,
lengthChange = FALSE,
paginate=FALSE,
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
"}"
)
)
}
df_pm1 <- read.csv("~/GitHub/AnnualMobilityReport2024/data/pm1_safety.csv", check.names=FALSE)
df_pm1 <- df_pm1[-1,] # Removes row saying Target
colnames(df_pm1) <- c('Year','Fatalities (total)','Fatalities per 100 million VMT','Serious Injuries','Serious Injuries per 100 million VMT','Non-motorized Fatalities and Serious Injuries')
datatable(caption = htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::HTML('Source: <a href="https://fdotwww.blob.core.windows.net/sitefinity/docs/default-source/planning/fto/pdis-documents/pm1-safety-fact-sheet-(feb23).pdf" target="_blank"><b>Florida Department of Transportation Forecasting and Trends Office</b></a>')),
df_pm1,options = c(table_options(), list(pageLength = 6)))
df_bridge <- read.csv("~/GitHub/AnnualMobilityReport2024/data/National_Bridge_NF.csv")
df_bridge <- df_bridge[df_bridge$DECK_CON != "N/A",]
point_data <- data.frame(
name = df_bridge$DECK_CON,
lat = df_bridge$LATDD,
lon = df_bridge$LONGDD,
feature = df_bridge$FEATURES_D,
facility = df_bridge$FACILITY_C,
location = df_bridge$LOCATION_0
)
# Continuous palette
ord <- factor(df_bridge$DECK_CON, levels = c('Good', 'Fair', 'Poor'))
pal <- colorFactor(palette = c("limegreen","darkgreen",'darkorange'), levels = ord, ordered = TRUE)
labs <- paste("<b>Deck Condition:</b> ", df_bridge$DECK_CON, "<br><b>Bridge Condition:</b>", df_bridge$BRIDGE_CON, "<br><b>Feature:  </b>",df_bridge$FEATURES_D,"<br><b>Facility: </b>",df_bridge$FACILITY_C,"<br><b>Location: </b>",df_bridge$LOCATION_0)
# Create the Leaflet map
leaflet(data = df_bridge) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(~LONGDD, ~LATDD, # Use the Longitude and Latitude columns
popup = ~paste0("<b>Deck Condition: </b>", DECK_CON, "<br><b>Bridge Condition: </b>",BRIDGE_CON, "<br><b>Feature:  </b>",FEATURES_D,"<br><b>Facility: </b>",FACILITY_C,"<br><b>Location: </b>",LOCATION_0),
radius=5,label = lapply(labs, htmltools::HTML), color = ~pal(DECK_CON), weight = 1,
fillOpacity = 0.8) %>%
setView(lng = -81.655651, lat = 30.232184, zoom = 9) %>%
addEasyButton(
easyButton(
icon = "fa-map-marker",
title = "Zoom to Jacksonville",
onClick = JS("function(btn, map){ map.setView([30.232184, -81.655651], 9); }")
)
)%>%
addLegend(df_bridge,
position = "bottomright",
pal = pal, values = ord,
title = "Bridge Deck Condition",
opacity = 1)
table_options <- function() {
list(
deferRender = TRUE,
searching = FALSE,
scroller = TRUE,
lengthChange = FALSE,
paginate=FALSE,
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
"}"
)
)
}
df_nhs <- read.csv("~/GitHub/AnnualMobilityReport2024/data/nhs_bridges.csv", check.names=FALSE, row.names=1)
colnames(df_nhs) <- c('Year','Good Condition','Poor Condition')
datatable(df_nhs,options = c(table_options(), list(pageLength = 5)))
table_options <- function() {
list(
rowCallback = DT::JS(
"function(row, data, index) {
$('td:eq(0)', row).html(index + 1);
}"
),
deferRender = TRUE,
searching = FALSE,
scroller = TRUE,
lengthChange = FALSE,
paginate=FALSE,
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
"}"
)
)
}
df_inter_pave <- read.csv("~/GitHub/AnnualMobilityReport2024/data/inter_pavements.csv", check.names=FALSE, row.names=1)
colnames(df_inter_pave) <- c('Year','Good Condition','Poor Condition')
datatable(df_inter_pave,options = c(table_options(), list(pageLength = 5)),
caption = htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::HTML('Source: <a href="https://fdotsourcebook.com/federal-measures/pavement" target="_blank"><b>FDOT Source Book, PM2-Pavement</b></a>'))
)
table_options <- function() {
list(
rowCallback = DT::JS(
"function(row, data, index) {
$('td:eq(0)', row).html(index + 1);
}"
),
deferRender = TRUE,
searching = FALSE,
scroller = TRUE,
lengthChange = FALSE,
paginate=FALSE,
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
"}"
)
)
}
df_noninter_pave <- read.csv("~/GitHub/AnnualMobilityReport2024/data/noninter_pavements.csv", check.names=FALSE, row.names=1)
colnames(df_noninter_pave) <- c('Year','Good Condition','Poor Condition')
datatable(df_noninter_pave,options = c(table_options(), list(pageLength = 5)),
caption = htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::HTML('Source: <a href="https://fdotsourcebook.com/federal-measures/pavement" target="_blank"><b>FDOT Source Book, PM2-Pavement</b></a>'))
)
table_options <- function() {
list(
rowCallback = DT::JS(
"function(row, data, index) {
$('td:eq(0)', row).html(index + 1);
}"
),
deferRender = TRUE,
searching = FALSE,
scroller = TRUE,
lengthChange = FALSE,
paginate=FALSE,
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
"}"
)
)
}
df_targets <- read.csv("~/GitHub/AnnualMobilityReport2024/data/state_targets.csv", check.names=FALSE, row.names=1)
df_targets <- df_targets[-1,]
colnames(df_targets) <- c('Performance Measure','2023 Target','2025 Target')
datatable(df_targets,options = c(table_options(), list(pageLength = 7)),
caption = htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::HTML('Source: <a href="https://fdotwww.blob.core.windows.net/sitefinity/docs/default-source/planning/fto/pdis-documents/ho_summary-of-targets-in-fl_230714_v4.pdf" target="_blank"><b>FDOT Forecasting & Trends Office</b></a>'))
)
table_options <- function() {
list(
deferRender = TRUE,
searching = FALSE,
scroller = TRUE,
lengthChange = FALSE,
paginate=FALSE,
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
"}"
)
)
}
df_sysperf <- read.csv("~/GitHub/AnnualMobilityReport2024/data/pm3_sysperf.csv", check.names=FALSE, row.names=1)
colnames(df_sysperf) <- c('Performance Measure','% of Person Miles Traveled on the Interstate that are Reliable',
'% of Person Miles Traveled on the Non-Interstate NHS Reliable','Truck Travel Time Reliability (TTTR) Index')
datatable(df_sysperf,
caption = htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::HTML('Source: <a href="https://performance-data-integration-space-fdot.hub.arcgis.com/pages/mpo-performance-resources" target="_blank"><b>Florida Department of Transportation Forecasting and Trends Office</b></a>')),
options = c(table_options(), list(pageLength = 8)))
table_options <- function() {
list(
deferRender = TRUE,
searching = FALSE,
scroller = TRUE,
lengthChange = FALSE,
paginate=FALSE,
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
"}"
)
)
}
df_tam <- read.csv("~/GitHub/AnnualMobilityReport2024/data/pm4_tam_updated.csv", check.names=FALSE, header=TRUE)
datatable(df_tam,
caption = htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::HTML('Source: <a href="https://www.fdot.gov/" target="_blank"><b>Florida Department of Transportation</b></a>')),
options = c(table_options(), list(pageLength = 14)))
table_options <- function() {
list(
deferRender = TRUE,
searching = FALSE,
scroller = TRUE,
lengthChange = FALSE,
paginate=FALSE,
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
"}"
)
)
}
df_tam_sunshine <- read.csv("~/GitHub/AnnualMobilityReport2024/data/pm4_tam_sunshine.csv", check.names=FALSE, header=TRUE)
datatable(df_tam_sunshine,
caption = htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::HTML('Source: <a href="https://www.fdot.gov/" target="_blank"><b>Florida Department of Transportation</b></a>')),
options = c(table_options(), list(pageLength = 4)))
table_options <- function() {
list(
deferRender = TRUE,
searching = FALSE,
scroller = TRUE,
lengthChange = FALSE,
paginate=FALSE,
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
"}"
)
)
}
df_transit_safety <- read.csv("~/GitHub/AnnualMobilityReport2024/data/pm4_transit_safety.csv", check.names=FALSE, header=TRUE)
datatable(df_transit_safety,
caption = htmltools::tags$caption(
style = 'caption-side: top; text-align: left;',
htmltools::HTML('Source: <a href="https://www.transit.dot.gov/ntd/data-product/safety-security-major-only-time-series-data" target="_blank"><b>Federal  Transit Administration</b></a>')),
options = c(table_options(), list(pageLength = 6)))
library(tidyverse)
library(ggplot2)
library(plotly)
library(dplyr)
library(knitr)
library(DT)
library(highcharter)
library(leaflet)
library(sf)
library(RColorBrewer)
library(scales)
library(htmlwidgets)
library(data.table)
library(htmltools)
library(tidyverse)
library(ggplot2)
library(plotly)
library(dplyr)
library(knitr)
library(DT)
library(highcharter)
library(leaflet)
library(sf)
library(RColorBrewer)
library(scales)
library(htmlwidgets)
library(data.table)
library(htmltools)
